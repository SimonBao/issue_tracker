{"version":3,"sources":["../server/app.js"],"names":["app","use","static","json","get","req","res","db","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","records","catch","console","log","error","post","newIssue","body","created","Date","status","err","validateIssue","message","insertOne","_id","result","insertedId","limit","next","connect","connection","listen"],"mappings":";;AACA;;;;AAGA;;;;AAGA;;AACA;;;;AACA;;AACA;;;;;;AALA;;AAQA,IAAMA,MAAM,wBAAZ;AACA;;AAZA;;AAaAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACA;AACA;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;AACA;;AAEAH,IAAII,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnCC,KAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCC,IAAzC,CAA8C,kBAAU;AACtD,QAAMC,WAAW;AACfC,mBAAaC,OAAOC;AADL,KAAjB;AAGAT,QAAIH,IAAJ,CAAS;AACPa,iBAAWJ,QADJ;AAEPK,eAASH;AAFF,KAAT;AAID,GARD,EAQGI,KARH,CAQS,iBAAS;AAChBC,YAAQC,GAAR,CAAYC,KAAZ;AACD,GAVD;AAWD,CAZD;AAaA;AACA;;AAEArB,IAAIsB,IAAJ,CAAS,aAAT,EAAwB,UAACjB,GAAD,EAAMC,GAAN,EAAc;AACpC;AACA,MAAMiB,WAAWlB,IAAImB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASI,MAAd,EACEJ,SAASI,MAAT,GAAkB,KAAlB;AACF,MAAMC,MAAM,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA;AACA,MAAIK,GAAJ,EAAS;AACP;AACAtB,QAAIqB,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AACnB2B,sCAA8BF;AADX,KAArB;AAGA;AACA;AACA;AACD;;AAEDrB,KAAGC,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkCR,QAAlC,EAA4CZ,IAA5C,CAAiD,kBAAU;AACzDJ,OAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B;AAC3BuB,WAAKC,OAAOC;AADe,KAA7B,EAEGC,KAFH,CAES,CAFT,EAEYC,IAFZ,GAEmBzB,IAFnB,CAGE,oBAAY;AACVL,UAAIH,IAAJ,CAASoB,QAAT;AACD,KALH,EAMEL,KANF,CAMQ,iBAAS;AACfC,cAAQC,GAAR,CAAYC,KAAZ;AACAf,UAAIqB,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AACnB2B,oCAA0BT;AADP,OAArB;AAGD,KAXD;AAYD,GAbD;AAcA;AACA;AACD,CAlCD;;AAoCA,IAAId,WAAJ;;AAEA,qBAAY8B,OAAZ,CAAoB,qBAApB,EAA2C1B,IAA3C,CAAgD,sBAAc;AAC5DJ,OAAK+B,WAAW/B,EAAX,CAAc,cAAd,CAAL;AACAP,MAAIuC,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrBpB,YAAQC,GAAR,CAAY,2BAAZ;AACD,GAFD;AAGD,CALD;AAMA","file":"app.js","sourcesContent":["\nimport express from 'express';\n//express web application framework for serving data\n\nimport bodyParser from 'body-parser';\n//body-parser middleware to extract data from request body\n\nimport {MongoClient} from 'mongodb';\nimport Issue from './issue.js'\nimport 'babel-polyfill'\nimport SourceMapSupport from 'source-map-support';\n\n\nconst app = express();\n//instantiates express;\napp.use(express.static('static'));\n//add middleware layer to handle static routing\n//built in express middleware to serve html files relative to request path\napp.use(bodyParser.json());\n//add bodyParser middleware layer to extract request body into a json obect\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then(issues => {\n    const metadata = {\n      total_count: issues.length\n    };\n    res.json({\n      _metadata: metadata,\n      records: issues\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n});\n//defined get route to serve a json response with metadata about the data and also\n//serve the issues\n\napp.post('/api/issues', (req, res) => {\n  // obtain post request body data and create an issue \n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status)\n    newIssue.status = 'New';\n  const err = Issue.validateIssue(newIssue)\n  //checks for any errors during newIssue validation check\n  if (err) {\n    //error occured in check execute block\n    res.status(422).json({\n      message: `Invalid requrest: ${err}`\n    });\n    //change status code to reflect error (unprocessible entity)\n    //pass a message with the status\n    return;\n  }\n\n  db.collection('issues').insertOne(newIssue).then(result => {\n    db.collection('issues').find({\n      _id: result.insertedId\n    }).limit(1).next().then(\n      newIssue => {\n        res.json(newIssue);\n      }\n    ).catch(error => {\n      console.log(error);\n      res.status(500).json({\n        message: `Server error: ${error}`\n      })\n    })\n  })\n  //if there are no errors, add newIssue to issues and\n  //send a json response with the newIssue object\n});\n\nlet db;\n\nMongoClient.connect('mongodb://localhost').then(connection => {\n  db = connection.db('issueTracker');\n  app.listen(3000, () => {\n    console.log('Server on: localhost:3000')\n  });\n});\n//set server to listen at port 3000 on sucessful MongoClient connection"]}